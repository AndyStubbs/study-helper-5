# Generated by Django 5.1.2 on 2024-11-25 18:58

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Chunk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True, max_length=1000, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Concept',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('normalized_name', models.CharField(editable=False, max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='Explanation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='Detailed explanation for the question.')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=300)),
                ('details', models.TextField(blank=True, max_length=1000, null=True)),
                ('is_open', models.BooleanField(default=False, help_text='Indicates if the question is an open-ended question (not multiple choice).')),
                ('is_code', models.BooleanField(default=False, help_text='Indicates if the question involves coding.')),
                ('language_class', models.CharField(blank=True, help_text="Programming language class for code highlighting, e.g., 'language-python'.", max_length=50)),
                ('boilerplate', models.TextField(blank=True, help_text='Boilerplate code provided as a starting point if this is a coding question.')),
                ('source', models.TextField(blank=True, help_text='Additional details added for the source of the question.', max_length=1000)),
                ('answers', models.JSONField(help_text='Store answers as a JSON array')),
                ('correct', models.CharField(help_text='Text of the correct answer', max_length=100)),
                ('correct_count', models.PositiveIntegerField(default=0, help_text='Number of times the user has correctly answered this question')),
                ('wrong_count', models.PositiveIntegerField(default=0, help_text='Number of times user answered this question wrongly')),
                ('skip_count', models.PositiveIntegerField(default=0, help_text='Number of times the skipped this question')),
                ('last_asked', models.DateTimeField(blank=True, help_text='The last time this question was answered', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('last_studied', models.DateTimeField(blank=True, null=True)),
                ('topic_data', models.JSONField(default=dict, help_text='Store custom settings like question type and source frequencies as JSON.')),
            ],
        ),
        migrations.CreateModel(
            name='UserKnowledge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('correct_points', models.PositiveIntegerField(default=0, help_text='Points awarded for correct answers')),
                ('wrong_points', models.PositiveIntegerField(default=0, help_text='Points deducted for wrong answers')),
            ],
        ),
    ]
