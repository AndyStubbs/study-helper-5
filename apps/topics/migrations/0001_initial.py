# Generated by Django 5.1.2 on 2024-11-23 23:24

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Concept',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=300)),
                ('normalized_name', models.CharField(editable=False, max_length=300)),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('name', 'user')},
            },
        ),
        migrations.CreateModel(
            name='Chunk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(blank=True, max_length=1000, null=True)),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chunks', to='topics.document')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=300)),
                ('details', models.TextField(blank=True, max_length=1000, null=True)),
                ('is_open', models.BooleanField(default=False, help_text='Indicates if the question is an open-ended question (not multiple choice).')),
                ('is_code', models.BooleanField(default=False, help_text='Indicates if the question involves coding.')),
                ('language_class', models.CharField(blank=True, help_text="Programming language class for code highlighting, e.g., 'language-python'.", max_length=50)),
                ('boilerplate', models.TextField(blank=True, help_text='Boilerplate code provided as a starting point if this is a coding question.')),
                ('source', models.TextField(blank=True, help_text='Additional details added for the source of the question.', max_length=1000)),
                ('answers', models.JSONField(help_text='Store answers as a JSON array')),
                ('correct', models.CharField(help_text='Text of the correct answer', max_length=100)),
                ('correct_count', models.PositiveIntegerField(default=0, help_text='Number of times the user has correctly answered this question')),
                ('wrong_count', models.PositiveIntegerField(default=0, help_text='Number of times user answered this question wrongly')),
                ('skip_count', models.PositiveIntegerField(default=0, help_text='Number of times the skipped this question')),
                ('last_asked', models.DateTimeField(blank=True, help_text='The last time this question was answered', null=True)),
                ('concepts', models.ManyToManyField(blank=True, related_name='questions', to='topics.concept')),
                ('main_concept', models.ForeignKey(blank=True, help_text='The main concept on which this question was generated', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='main_concept_questions', to='topics.concept')),
            ],
        ),
        migrations.CreateModel(
            name='Explanation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='Detailed explanation for the question.')),
                ('question', models.OneToOneField(help_text='The question that this explanation is linked to.', on_delete=django.db.models.deletion.CASCADE, related_name='explanation', to='topics.question')),
            ],
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, max_length=1000, null=True)),
                ('last_studied', models.DateTimeField(blank=True, null=True)),
                ('topic_data', models.JSONField(default=dict, help_text='Store custom settings like question type and source frequencies as JSON.')),
                ('concepts', models.ManyToManyField(blank=True, related_name='topics', to='topics.concept')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='question',
            name='topic',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='topics.topic'),
        ),
        migrations.CreateModel(
            name='UserKnowledge',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('correct_points', models.PositiveIntegerField(default=0, help_text='Points awarded for correct answers')),
                ('wrong_points', models.PositiveIntegerField(default=0, help_text='Points deducted for wrong answers')),
                ('concept', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='knowledge_records', to='topics.concept')),
                ('topic', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='knowledge_records', to='topics.topic')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='knowledge_records', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'constraints': [models.UniqueConstraint(fields=('user', 'topic', 'concept'), name='unique_user_topic_concept')],
            },
        ),
    ]
