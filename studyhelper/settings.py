"""
Django settings for studyhelper project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path( __file__ ).resolve().parent.parent

# Ensure the logs directory exists
LOG_DIR = Path( BASE_DIR ) / 'logs'
LOG_DIR.mkdir( exist_ok=True )

SECRET_KEY = os.getenv( "DJANGO_SECRET_KEY" )

if not SECRET_KEY:
	raise RuntimeError( "DJANGO_SECRET_KEY environment variable is required but not set." )

DEBUG = os.getenv( "DJANGO_DEBUG", "False" ).lower() == "true"

ALLOWED_HOSTS = os.getenv( "DJANGO_ALLOWED_HOSTS", "" ).split( "," )

# Application definition

INSTALLED_APPS = [
	'django.contrib.admin',
	'django.contrib.auth',
	'django.contrib.contenttypes',
	'django.contrib.sessions',
	'django.contrib.messages',
	'django.contrib.staticfiles',

	# Custom apps
	"apps.users",
	"apps.topics",
	"apps.about",
]

MIDDLEWARE = [
	'django.middleware.security.SecurityMiddleware',
	'django.contrib.sessions.middleware.SessionMiddleware',
	'django.middleware.common.CommonMiddleware',
	'django.middleware.csrf.CsrfViewMiddleware',
	'django.contrib.auth.middleware.AuthenticationMiddleware',
	'django.contrib.messages.middleware.MessageMiddleware',
	'django.middleware.clickjacking.XFrameOptionsMiddleware'
]

ROOT_URLCONF = 'studyhelper.urls'

TEMPLATES = [
	{
		'BACKEND': 'django.template.backends.django.DjangoTemplates',
		'DIRS': [ BASE_DIR / "templates" ],
		'APP_DIRS': True,
		'OPTIONS': {
			'context_processors': [
				'django.template.context_processors.debug',
				'django.template.context_processors.request',
				'django.contrib.auth.context_processors.auth',
				'django.contrib.messages.context_processors.messages',
			],
		},
	},
]

WSGI_APPLICATION = 'studyhelper.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

if DEBUG:
	DATABASES = {
		"default": {
			"ENGINE": "django.db.backends.sqlite3",
			"NAME": BASE_DIR / "db.sqlite3",
		}
	}
else:
	DATABASES = {
		"default": {
			"ENGINE": "django.db.backends.postgresql",
			"NAME": os.getenv( "POSTGRES_DB" ),
			"USER": os.getenv( "POSTGRES_USER" ),
			"PASSWORD": os.getenv( "POSTGRES_PASSWORD" ),
			"HOST": os.getenv( "POSTGRES_HOST", "localhost" ),
			"PORT": os.getenv( "POSTGRES_PORT", "5432" ),
		}
	}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
	{
		'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
	},
	{
		'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
	},
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [ BASE_DIR / "static" ]

AUTH_USER_MODEL = "users.CustomUser"

LOGGING = {
	"version": 1,
	"disable_existing_loggers": False,
	"formatters": {
		"verbose": {
			"format": "{levelname} {asctime} {module} {message}",
			"style": "{",
		},
		"simple": {
			"format": "{levelname} {message}",
			"style": "{"
		}
	},
	"filters": {
		"exclude_autoreload": {
			"()": "django.utils.log.CallbackFilter",
			"callback": lambda record: "autoreload" not in record.getMessage(),
		},
	},
	"handlers": {
		 "info_file": {
			"level": "INFO",
			"class": "logging.FileHandler",
			"filename": os.path.join(BASE_DIR, "logs", "django.info.log"),
			"formatter": "verbose",
		},
		"debug_file": {
			"level": "DEBUG",
			"class": "logging.FileHandler",
			"filename": os.path.join(BASE_DIR, "logs", "django.debug.log"),
			"formatter": "verbose",
			"filters": ["exclude_autoreload"],
		},
		"console": {
			"level": "WARNING",
			"class": "logging.StreamHandler",
			"formatter": "simple",
		},
	},
	"loggers": {
		"django": {
			"handlers": ["info_file", "debug_file", "console"],
			"level": "DEBUG",
			"propagate": False,
		},
		"django.utils.autoreload": {
			"level": "INFO",
			"handlers": [],
			"propagate": False,
		},
	},
}
